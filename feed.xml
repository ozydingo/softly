<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="speaksoftly.io/feed.xml" rel="self" type="application/atom+xml" /><link href="speaksoftly.io/" rel="alternate" type="text/html" /><updated>2017-10-06T09:10:39-04:00</updated><id>speaksoftly.io/</id><title type="html">Speak Softly</title><subtitle>A blog about coding awesome, powerful tools...respectfully
</subtitle><entry><title type="html">Pitching Rails and ActiveRecord</title><link href="speaksoftly.io/2017/10/05/pitching-rails.html" rel="alternate" type="text/html" title="Pitching Rails and ActiveRecord" /><published>2017-10-05T21:43:00-04:00</published><updated>2017-10-05T21:43:00-04:00</updated><id>speaksoftly.io/2017/10/05/pitching-rails</id><content type="html" xml:base="speaksoftly.io/2017/10/05/pitching-rails.html">&lt;hr /&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Making the case for Rails and ActiveRecord and for models-over-data to a hardcore SQL enthusiast&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When you spend a lot of time in Rails, it’s very easy to forget how much you take for granted. It’s also easy to forget how much you give up. Most of the time, you don’t miss much from the latter. To a developer who’s very fluent with raw SQL, Rails can often feel like way too much abstraction, and way too much magic. I get that. Magic is cool and all, but you lost an element of understanding and control. So I imagine a common question a lot of experienced developers seeing Rails for the first time ask themselves is “why should I learn this?”&lt;/p&gt;

&lt;p&gt;In this post I hope to provide fodder to answer that question. This is a brief and by no means complete enumeration of ideas in this domain, but a hopefully digestable introduction.&lt;/p&gt;

&lt;h2 id=&quot;models-over-data&quot;&gt;Models over data&lt;/h2&gt;

&lt;p&gt;At the core of any web app, you want to deal with (read, write, and manipulate) data. &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM widgets WHERE name = 'Best Widget'&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO widgets (name, price) VALUES ('Totall Awesome Widget', 1000000)&lt;/code&gt;. No problem. Ok, so you could do this with ActiveRecord too: &lt;code class=&quot;highlighter-rouge&quot;&gt;Widget.find_by(name: &quot;Best Widget&quot;)&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Widget.create(name: &quot;Totally Awesome Widget&quot;, price: 1_000_000)&lt;/code&gt;. Different syntax, same functionality. If the readability doesn’t sell you, then what’s the big deal?&lt;/p&gt;

&lt;p&gt;To me, most of the big deal comes with thinking about models over pure data. ActiveRecord is a powerful intersection between &lt;a href=&quot;https://en.wikipedia.org/wiki/Object-oriented_programming&quot;&gt;OOP&lt;/a&gt; and data persistence in a relational database. I’m not gonig to try to repeat the entire internet to make a case for object-oriented programming itself, but it is perhaps worth noting one or two bullet points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data is just data, instance of classes contain data and give you &lt;em&gt;behavior&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;widget = Widget.find(1)&lt;/code&gt; therefore not only gives you the &lt;em&gt;data&lt;/em&gt; in the row of the &lt;code class=&quot;highlighter-rouge&quot;&gt;widgets&lt;/code&gt; table with id 1, but also gives you any consistent behavior you as the developer have written into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Widget&lt;/code&gt; class. &lt;code class=&quot;highlighter-rouge&quot;&gt;widget.activate&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;widget.destroy&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;widget.compute_trajectory&lt;/code&gt;. All of the methods (or functions, if you prefer) are now a developer-facing API to this object that encapsulates a single row of data in your &lt;code class=&quot;highlighter-rouge&quot;&gt;widgets&lt;/code&gt; table.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to a logically organized set of behavior naturally associated with your data, here are a few of the things you unlock with this framing.&lt;/p&gt;

&lt;h3 id=&quot;1-callbacks&quot;&gt;1. Callbacks&lt;/h3&gt;

&lt;p&gt;While Rails has its very own seven layers of callback hell, when used properly they clean up a lot of code and can give you a very robust architecture. Let’s say our &lt;code class=&quot;highlighter-rouge&quot;&gt;widgets&lt;/code&gt; table has a &lt;code class=&quot;highlighter-rouge&quot;&gt;price_updated_at&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;DATETIME&lt;/code&gt; column. Keeping this data in sync always is as simple as:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_save&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:check_for_price_update&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check_for_price_update&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;price_updated_at&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now anyone*, anywhere*, who changes the price on a given row of the &lt;code class=&quot;highlighter-rouge&quot;&gt;widgets&lt;/code&gt; table doesn’t even have to know about the existence of the &lt;code class=&quot;highlighter-rouge&quot;&gt;price_updated_at&lt;/code&gt; data column – it gets updated correctly, and your data stay internally consistent.&lt;/p&gt;

&lt;p&gt;* - The glaring exeptions, of course, are if you (1) use methods specifically designed to avoid callbacks (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;update_columns&lt;/code&gt;), or (2) update the data using SQL or any other non-ActiveRecord-sanctioned method. It’s never impossible to do it the old fashioned way, but you shouldn’t have to if your models are well designed.&lt;/p&gt;

&lt;h3 id=&quot;2-abstraction&quot;&gt;2. Abstraction&lt;/h3&gt;

&lt;p&gt;Ruby often encourages you to forget about the specific of getter and setter methods, but in many an OOP class you’ll learn to define them with checks, validations, or other behaviors. Here’s a quick example, jumping right into ActiveRecord with an example where we want to encrypt a field before storing it in our database.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;# setter&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;encrypted_secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AESCrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sooper_secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encrypted_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;# getter&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;secret&lt;/span&gt;
     &lt;span class=&quot;no&quot;&gt;AESEncrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decrypt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sooper_secret&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ignoring how terribly unsecure this encryption is, the functioality is sublime. We simply interact with the &lt;code class=&quot;highlighter-rouge&quot;&gt;secret&lt;/code&gt; field as if it were a normal, plain text field. Under the hood, our model now automatically encrypts (in the setter) and descrupt (in the getter) the value, so the plain text secret never touches the db.&lt;/p&gt;

&lt;p&gt;This isn’t meant to be a primer on OOP, and of course anything you can think of doing with a &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; can be done here. Define methods that combine and manipulate data not stored directly on the table. Define procedures that do several complicated update steps. This is, of course, nothing you coudln’t do with an externally-defined class in any language which you can initialize with the data selected by raw SQL, but by representing the model backed by these data as a native, first-class citizen, you unlock a powerful level of fluency.&lt;/p&gt;

&lt;h3 id=&quot;3-dry-queries&quot;&gt;3. DRY queries&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;DRY&lt;/a&gt; code is maintainable code. I’ll let a small comparison speak for itself:&lt;/p&gt;

&lt;p&gt;You can blow with this&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;SELECT * FROM widgets INNER JOIN creators ON creators.id = widgets.creator_id \
  INNER JOIN profiles ON creators.profile_id = profiles.id WHERE \
  widgets.available = 1 AND profiles.locale = 'us' \
  ORDER BY widgets.id DESC LIMIT 1;
SELECT count(*) FROM widgets INNER JOIN creators ON creators.id = \
  widgets.creator_id INNER JOIN profiles ON creators.profile_id = \
  profiles.id WHERE widgets.available = 1 AND profiles.locale = 'us';
SELECT count(*) FROM widgets INNER JOIN creators ON creators.id = \
  widgets.creator_id INNER JOIN profiles ON creators.profile_id = \
  profiles.id WHERE widgets.available = 1 AND profiles.locale = 'us' \
  GROUP BY creators.name;
SELECT count(*) FROM widgets INNER JOIN creators ON creators.id = \
  widgets.creator_id INNER JOIN profiles ON creators.profile_id = profiles.id \
  WHERE widgets.available = 1 AND profiles.locale = 'us' AND widgets.price &amp;lt; \
  1000 GROUP BY creators.name;
SELECT count(*) FROM widgets INNER JOIN creators ON creators.id = \
  widgets.creator_id INNER JOIN profiles ON creators.profile_id = \
  profiles.id WHERE widgets.available = 1 AND profiles.locale = 'us' AND \
  widgets.name = 'my_widget' GROUP BY creators.name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or you can blow with that&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;creator_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:creator_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:creator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;available: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;profiles: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;locale: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'us'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;creator_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;creator_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;price &amp;lt; 1000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;creator_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_widget&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These queries (here, the object represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;widgets&lt;/code&gt;) are themselves first-class citizens, members of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Widget::ActiveRecord_Relation&lt;/code&gt;. You can pass these query objects into other methods and to other objects. You can build entire gems around manipulating these queries to some thematic end. With this native representation of the table rows or a query on these table rows as class instances, you can unleash a lot of functionality with very readable, maintainable, and slim code.&lt;/p&gt;

&lt;p&gt;And with just a little extra Railsing, you could even blow with this:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;creator_count&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cheaper_than&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;creator_count&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;us&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my_widget&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;creator_count&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;Three’s a charm, so I’ll leave it at that.&lt;/p&gt;</content><author><name></name></author><summary type="html">Summary</summary></entry><entry><title type="html">Rails is Ridiculous</title><link href="speaksoftly.io/2017/03/30/rails-is-ridiculous.html" rel="alternate" type="text/html" title="Rails is Ridiculous" /><published>2017-03-30T17:32:39-04:00</published><updated>2017-03-30T17:32:39-04:00</updated><id>speaksoftly.io/2017/03/30/rails-is-ridiculous</id><content type="html" xml:base="speaksoftly.io/2017/03/30/rails-is-ridiculous.html">&lt;h2 id=&quot;part-1-of-many-to-come&quot;&gt;Part 1 of many to come&lt;/h2&gt;

&lt;p&gt;“Convention over configuration”. So the saying goes.&lt;/p&gt;

&lt;p&gt;While often applied to Rails’ ability to create a lot of functionality with relatively spares amounts of code, I also take a liking to this saying as synonymous with the principle of least surpise: code design should pack as few surprises as possible while accomplishing its goals. You take advantage of this philosophy every time you assume &lt;code class=&quot;highlighter-rouge&quot;&gt;to_s&lt;/code&gt; returns a reasonable String representation of any object, or that &lt;code class=&quot;highlighter-rouge&quot;&gt;.nil?&lt;/code&gt; returns a Boolean value according to whether or not ab object is &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;. Technically, a codeing ne’er-do-well could easily write the &lt;code class=&quot;highlighter-rouge&quot;&gt;nil?&lt;/code&gt; class to return a random number. In Ruby, they could just as eaily overwrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;nil?&lt;/code&gt; method on &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, which would of course screw up a lot.&lt;/p&gt;

&lt;p&gt;I’ve already hinted at how &lt;a href=&quot;/2016/07/28/objectification.html&quot;&gt;Rails disobeys this principle&lt;/a&gt; more than I’m confortable with. However I recently came upon a bug-inducing example that really took be aback. So now I’m going to write about it.&lt;/p&gt;

&lt;p&gt;As a convenience, I had written a &lt;code class=&quot;highlighter-rouge&quot;&gt;lower_bound&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;upper_bound&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;bound&lt;/code&gt; method into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Numeric&lt;/code&gt; class in an application – I could just no longer abide using using the ‘min’ method to mean upped bound and &lt;code class=&quot;highlighter-rouge&quot;&gt;max&lt;/code&gt; for lower bound. “But wait,” you say, “isn’t that doing exactly the objectification that you just said in that post that you hate doing?” I mean, yeah, a little, but this is for convenience in a specific application, not for a gem or framework that will be distributed and imported in other applications. It’s just easier and more fun to write &lt;code class=&quot;highlighter-rouge&quot;&gt;x.upper_bound(3.0)&lt;/code&gt; than something like &lt;code class=&quot;highlighter-rouge&quot;&gt;Bounder.new(x).upper_bound(3.0)&lt;/code&gt;. But no, I would never be so presumptuous in a gem for distribution, thanks for asking.&lt;/p&gt;

&lt;p&gt;Anyway, to the point. I wanted to expand this method to &lt;code class=&quot;highlighter-rouge&quot;&gt;DateTime&lt;/code&gt; objects as well. So where to put it? Our app uses time zones extensively, so &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveSupport::TimeWithZone&lt;/code&gt; as well as plain old &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; need this method. Luckily:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Wonderful! Just put it on &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; and we’re set! I do so with a &lt;code class=&quot;highlighter-rouge&quot;&gt;core_ext/time.rb&lt;/code&gt; file. But then I notice something funny:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Thu, 30 Mar 2017 18:08:29 EDT -04:00&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Thu, 30 Mar 2017 18:08:30 EDT -04:00&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Thu, 30 Mar 2017 17:38:32 EDT -04:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Huh? Lower-bounding by a day ago worked as expected (no change), but lower-bounding by half an hour ago returns half an hour ago? I could have probed further to discover that the 4-hour time zone shift was the cutoff for this weird behavior, but this time I went straight for the pry:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;001&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ago&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/Users/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;andrew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boundable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rb&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Boundable&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#lower_bound:&lt;/span&gt;

     &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hpry&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;
     &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coerce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 2017-03-30 18:46:45 UTC&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Thu, 30 Mar 2017 18:16:45 EDT -04:00&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ActiveSupport::TimeWithZone&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To summarize, “now” is apparently less than “30 minutes ago”. More precisely, the object returned by &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.zone.now&lt;/code&gt; is evaluating as less than &lt;code class=&quot;highlighter-rouge&quot;&gt;30.minutes.ago&lt;/code&gt;, because when evaluating this line of code, &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; is a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; object (in UTC), and is being compared against a &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveSupport::TimeWithZone&lt;/code&gt; object, but as a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; object it doesn’t know about time zones.&lt;/p&gt;

&lt;p&gt;But why did &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; forget about its true identity as a &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeWithZone&lt;/code&gt;? Let’s sanity check how we’re getting into this method:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;owner&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ActiveSupport::TimeWithZone&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_location&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:lower_bound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_location&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;/Users/andrew/3p/app3/lib/boundable.rb&quot;, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So the owner is &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveSupport::TimeWithZone&lt;/code&gt;, but there’s not source location? Except there is for a regular &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; object? We need more basic sanity checking:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;superclass&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ancestors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveSupport::TimeWithZone&lt;/code&gt; ingerits directly from &lt;code class=&quot;highlighter-rouge&quot;&gt;Object&lt;/code&gt;, not from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; class in any way. We already cofirmed that &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.zone.now.is_a?(Time)&lt;/code&gt;; this appears to contradict that finding. Let’s get to the stack trace using &lt;code class=&quot;highlighter-rouge&quot;&gt;caller&lt;/code&gt; in the pry. Highlighting just the relevant portion, we have:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;/Users/andrew/3p/app3/lib/boundable.rb:7:in `lower_bound'&quot;,
&quot;/Users/andrew/.rvm/gems/ruby-2.3.3/gems/activesupport-4.2.3/lib/active_support/time_with_zone.rb:371:in `method_missing'&quot;,
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ah, the dreaded “method_missing” pattern. I have found few valid uses of &lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt;, and this, in ActiveSupport’s very own &lt;code class=&quot;highlighter-rouge&quot;&gt;time_with_zone.rb&lt;/code&gt;, is &lt;strong&gt;NOT&lt;/strong&gt; one of them:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# Send the missing method to +time+ instance, and wrap result in a new&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# TimeWithZone with the existing +time_zone+.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;wrap_with_time_zone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;__send__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NoMethodError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backtrace&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt;, of class &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt;, is an instance variable belonging to &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeWithZone&lt;/code&gt;, and this is the object that gave us the bug by not being able to correclty compare itself to &lt;code class=&quot;highlighter-rouge&quot;&gt;bound&lt;/code&gt;, above. This &lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt; pattern appears to evaluate the unknown method on the zone-normalized local &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt; object, because the authors thought that would basically be good enough. In a way it’s impementing a poor-man’s inheritance scheme. It works for the most part, but causes slippery bugs in edge cases such as ours: the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; method returned the wrong result against a &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeWithZone&lt;/code&gt; object. Surprise!&lt;/p&gt;

&lt;p&gt;More generally, if &lt;code class=&quot;highlighter-rouge&quot;&gt;sym&lt;/code&gt; here is a method that calls any other method overwritten by &lt;code class=&quot;highlighter-rouge&quot;&gt;TimeWithZone&lt;/code&gt;, this will not work correctly. Turns out, as much as Rubyists diss inheritance, &lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt; is not actually a good substitute for it. Who’d have thought?&lt;/p&gt;

&lt;p&gt;Edge cases are fine to overlook in an application as a business decision, but the more general and distributed your code gets the more important it should be to have all edge cases make some logical sense. This case does not. In a package as widespread as Rails, decisions like these are just sloppy.&lt;/p&gt;

&lt;p&gt;For our use case here, I just slapped the same methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveSupport::TimeWithZone&lt;/code&gt; as well, despire them already being included in &lt;code class=&quot;highlighter-rouge&quot;&gt;Time&lt;/code&gt;, which we’re supposed to get for free except for the fact that someone thought &lt;code class=&quot;highlighter-rouge&quot;&gt;method_missing&lt;/code&gt; was an effective substitute for inheritance.&lt;/p&gt;

&lt;p&gt;I wasn’t done digging: we still have this hanging fact that &lt;code class=&quot;highlighter-rouge&quot;&gt;Time.zone.now.is_a?(Time)&lt;/code&gt;. Turns out:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source_location&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&quot;/Users/andrew/.rvm/gems/ruby-2.3.3/gems/activesupport-4.2.3/lib/active_support/time_with_zone.rb&quot;, 334]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You overwrote &lt;code class=&quot;highlighter-rouge&quot;&gt;is_a?&lt;/code&gt;. You freakin overwrote &lt;code class=&quot;highlighter-rouge&quot;&gt;is_a?&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# Say we're a Time to thwart type checking.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hacktastic.&lt;/p&gt;

&lt;p&gt;That cuts deep, Rails. Too bad I just can’t quit you…&lt;/p&gt;</content><author><name></name></author><summary type="html">Part 1 of many to come</summary></entry><entry><title type="html">fluent rebasing</title><link href="speaksoftly.io/2017/01/09/fluent-rebasing.html" rel="alternate" type="text/html" title="fluent rebasing" /><published>2017-01-09T11:02:11-05:00</published><updated>2017-01-09T11:02:11-05:00</updated><id>speaksoftly.io/2017/01/09/fluent-rebasing</id><content type="html" xml:base="speaksoftly.io/2017/01/09/fluent-rebasing.html">&lt;p&gt;Recently, we’ve adopted &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot;&gt;rebasing&lt;/a&gt; into our git workflow. Because of this, we now enjoy clean, traceable, and roll-backable code history. Rebasing is great. However, it comes with a few issues, which I will call “rebase trolls”. Rebase trolls love to hide out in long-running branches, waiting to make a mockery of your best intentions when you suggest “hey, we should rebase this branch first before merging it into master”.&lt;/p&gt;

&lt;p&gt;The aim of this post is not to convince you to rebase. No, I only intend to arm you with the necessary tools to easily smack down these rebasing trolls. Starting with some of the simpler cases and progress onto the complications that inevitably arise as specs evolve and bugs are discovered, you should ultimately feel that rebasing is (almost) as easy as straight merging.&lt;/p&gt;

&lt;p&gt;In all of the commands below, you can always replace refs such as &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;, with any other git ref. I have used example refs of &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; when this is likely how you will usually use them.&lt;/p&gt;

&lt;h1 id=&quot;basic-rebasing&quot;&gt;Basic Rebasing&lt;/h1&gt;

&lt;p&gt;There’s a lot of well-writtenand concise info on rebasing in the &lt;a href=&quot;https://git-scm.com/book/en/v2&quot;&gt;git book&lt;/a&gt;. Get to know &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot;&gt;basic rebasing&lt;/a&gt;, the &lt;a href=&quot;https://git-scm.com/docs/git-push&quot;&gt;–force&lt;/a&gt; flag, and &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&quot;&gt;commit squashing&lt;/a&gt; as a baseline. In a nutshell,  &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase master&lt;/code&gt; takes your branch and makes-believe that you started that branch on current master. But because belief is reality, it also make it so. What you get is then a simple, step-by-step, linear history of commits to &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; without complicated forks and dependencies.&lt;/p&gt;

&lt;p&gt;[image1: basic rebase]&lt;/p&gt;

&lt;p&gt;With &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History&quot;&gt;interactive rebasing&lt;/a&gt;, you can also clean up your branch: you can combine multiple commits, re-order commits, and generally manipulate a branch. Why? To make your commits more useful when you other other developers need to look back at, or revert to, this chapter in your code’s history. Away with you, commit messages of “beh”! Now each commit can fully represent a meaningful code change that can be understood at a glance.&lt;/p&gt;

&lt;p&gt;As you become more fluent with rebasing, you gain a new perspective on your code. Instead of a bag of files, your code base also becomes a series of meaningful commits. Merging into master evolves from “shove my files into master” into “apply my feature change(s) on top of the current commit stack”. Personally, I find this perspective to be enormously useful when planning how to combine mulitple long-running feture branches into a major code release.&lt;/p&gt;

&lt;p&gt;[image2: rebase with reorder (fixup) and squash]&lt;/p&gt;

&lt;h1 id=&quot;rebasing-issues&quot;&gt;Rebasing Issues&lt;/h1&gt;

&lt;p&gt;Rebasing has a learning curve. But if you commit (heh) to it, it’s really not hard to get over it.&lt;/p&gt;

&lt;p&gt;The most common issue rebasing newbies encounter is basically a really annoying and persistent merge conflict. Bad commit habits can turn merge conflicts from merely annoying to a huge pain in the ass when rebasing is involved. These are always defeatable, and also preventable. First, let’s understand what’s happening.&lt;/p&gt;

&lt;p&gt;When you rebase a long series of commits, git redoes each commit sequentially, dealing with any issues one commit at a time. So on a branch with 25 new commits, a merge conflict on commit 1 if not resolved smartly can become a merge conflict in commit 2, and 3, and so on. The “undying merge conflict”. Nobody wins.&lt;/p&gt;

&lt;p&gt;For example, if you change a block of code that was moved on master, you get a merge conflict. You resolve this by moving your changed block of code to where it was moved to on master. But you changed that same block of code again in the next commit. New merge conflict.&lt;/p&gt;

&lt;p&gt;Another common issue is the cloned commit. Rebasing a commit necessarily changes it, so if you merge a branch that contains commits that are rebased version of old commits you already have, you will get both sets of commits. This issue and some of its solutions are well described in the &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Branching-Rebasing&quot;&gt;git book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the following sections, we will discuss (1) prevention of these issues, (2) how to deal with them if you failed to prevent them, and (3) your safety net should you get in over your head when trying to solve these issues.&lt;/p&gt;

&lt;h1 id=&quot;prevention&quot;&gt;Prevention&lt;/h1&gt;

&lt;p&gt;The best offense is a good defense, so let us take our battle right to the home of the rebase trolls. Keep your branch clean. Use helpful commit messages. You may not want to spend the 2 seconds it takes to remember what you just did, but when shit hits the fan you will be very glad you did. You might even get a little boost in code strategy organiation while you’re at it!&lt;/p&gt;

&lt;p&gt;Here are some tools to help you that you might not be familiar with if you’re new to rebasing.&lt;/p&gt;

&lt;h2 id=&quot;1-clean-up-your-commits&quot;&gt;1. Clean up your commits&lt;/h2&gt;

&lt;p&gt;The lowest hanging fruit here are the extra commits you make to quickly fix up a quick typo or similar: the dreaded “beh” commit (with messages like “beh” or “oops” or “fixed”). These commits do not belong in your history; get rid of them! When battling the undying merge conflict, if you’re weighed down by carrying 23 “beh” commits with you, the rebase troll is going to win.&lt;/p&gt;

&lt;p&gt;Before we go on, the following can never be stated enough times. Other developers working on your code need to all be in sync when rewrite / rebase commits. Rebase trolls are sneaky bastards: if you vanquish them from your branch they will look for any opportunity to hop onto someone else’s local copy of that branch. Don’t let them! If anyone else has a copy of a branch you wish to rebase, make sure they delete or &lt;a href=&quot;#reset&quot;&gt;fetch and reset&lt;/a&gt; their branch before they do anything else!&lt;/p&gt;

&lt;p&gt;That said, here are some of the tools you can use to clean up your branch and diminish the rebase trolls’ power.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;amend&quot; id=&quot;amend&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit --amend --no-edit&lt;/code&gt; - immediately squash the current staged changes into the last commit (&lt;code class=&quot;highlighter-rouge&quot;&gt;--amend&lt;/code&gt;) and use its commit message (&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-edit&lt;/code&gt;). Use this when you want to make a quick change to the last commit (that isn’t yet on master or anyone else’s machine)&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;fixup&quot; id=&quot;fixup&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit --fixup $sha&lt;/code&gt; - Make a new commit, but mark it as an amendment (with no message changes) to the commit specified by &lt;code class=&quot;highlighter-rouge&quot;&gt;$sha&lt;/code&gt;. Use this is you want to modify an earlier commit but aren’t prepared to actually modify that commit yet, maybe because someone else is also working on the same branch.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;fixup&quot; id=&quot;fixup&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit --squash $sha&lt;/code&gt; - Like &lt;code class=&quot;highlighter-rouge&quot;&gt;--fixup&lt;/code&gt;, but prompt for a new commit message when you squash the commits together.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;autosquash&quot; id=&quot;autosquash&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase -i --autosquash $ref&lt;/code&gt; - Do an interactive rebase, but automatically reorder and set to fixup / squash any commits that are marked to do so. Here, the &lt;code class=&quot;highlighter-rouge&quot;&gt;--autosquash&lt;/code&gt; is only helpful if you’ve marked any commits as &lt;code class=&quot;highlighter-rouge&quot;&gt;--fixup&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;--squash&lt;/code&gt; commits.&lt;/p&gt;

&lt;h2 id=&quot;2-make-sensible-commits&quot;&gt;2. Make sensible commits&lt;/h2&gt;

&lt;p&gt;When you view your code base as a bag of files instead of a series of commits, a quick typo fix can go anywhere in your commit history. But when you take on the series-of-commits viewpoint, though, you’ll quickly learn to insist that those commits be by themselves or squashed into the original commit. Otherwise you just won’t feel like all is right in the world.&lt;/p&gt;

&lt;p&gt;Why? Because rebasing, AKA manipulating commits, is difficult when the commits themselves don’t actually represent any coherent set of changes. Not just because you don’t know which change is where, but because commits littered with fixes to other commits introduces dependencies to those commits, and reordering or cherry picking commits becomes difficult or impossible. So commit wisely, and avoid the rebase trolls!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git add $file1 $file2 ...&lt;/code&gt; - add only specified files to the changes staged for commit. You likely already know this one, but may largely use the &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt; form (“add everything”). Be more specific! Need to make a quick unrelated fix in the middle of your feature branch? &lt;code class=&quot;highlighter-rouge&quot;&gt;git add $that_file; git commit -m 'fix that_file'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Did you make a quick fix on a file that you have other changes on for your branch?&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;add&quot; id=&quot;add&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -p&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;--patch&lt;/code&gt;) - select specific sections of code changes to stage for commit.
&lt;code class=&quot;highlighter-rouge&quot;&gt;git add -i&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;--interactive&lt;/code&gt;, from which you can enter &lt;code class=&quot;highlighter-rouge&quot;&gt;patch&lt;/code&gt; mode)&lt;/p&gt;

&lt;p&gt;Using the patch tool, you are provocatively asked for each section of code that has changed if you want to “stage this hunk?”. Here, you can answer “yes” only to the hunks that are the typo fix, commit those changes (using &lt;code class=&quot;highlighter-rouge&quot;&gt;--fixup&lt;/code&gt; if you so choose), then continue coding as if nothing had interrupted your flow. You can also use the &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; command to split a hunk into smaller sections if the quick fix you’re looking to add is only a piece of the current hunk. Hunk hunk hunk. Great word.&lt;/p&gt;

&lt;h2 id=&quot;3-be-aware-of-your-environment&quot;&gt;3. Be aware of your environment&lt;/h2&gt;

&lt;p&gt;Visibility is key to avoiding traps, so knowing how to easily detect lurking rebase trolls can help you vanquish them. For this, you’ll first want to make liberal use of &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;. Here are a few forms of &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; that can be helpful when preparing for battle.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;log&quot; id=&quot;log&quot;&gt;&lt;/a&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --graph&lt;/code&gt; - show a graphical represnetation of existing commits and their parent commits.
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log master..head&lt;/code&gt; - show commits that exist on &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; but not on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. What happens if you switch &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;?
&lt;code class=&quot;highlighter-rouge&quot;&gt;git show $sha&lt;/code&gt; - show the changes made by &lt;code class=&quot;highlighter-rouge&quot;&gt;$sha&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;cherry&quot; id=&quot;cherry&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry master head&lt;/code&gt; will show you just the sha’s of the commits on &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Here, the second ref (&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;) is optional and defaults to &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;name-status&quot; id=&quot;name-status&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff --name-status&lt;/code&gt; - view just the file names that have been modified or added, each with a “M” or “A” to indicate which. Using the default refs essentially gives you the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;, but with &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; you can view this form between any two git refs.
&lt;code class=&quot;highlighter-rouge&quot;&gt;git show $sha --name-status&lt;/code&gt; - the same for a single commit using &lt;code class=&quot;highlighter-rouge&quot;&gt;git show&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --name-status&lt;/code&gt; - the same for &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;battle&quot;&gt;Battle&lt;/h1&gt;

&lt;p&gt;Even after you’ve mastered the above, you will still have to battle the rebase trolls from time to time. When you do, here are some weapons that will help you on your journey.&lt;/p&gt;

&lt;h2 id=&quot;1-squash-commits-without-rebasing-on-the-latest-master&quot;&gt;1. Squash commits without rebasing on the latest master&lt;/h2&gt;

&lt;p&gt;If you know you’re about to fight an undying merge conflict across several commits, you could squash all of these commits first to make your battle easier. However, if you’ve already fetched &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; from your remote, any attempt to rebase off of master enters you directly into the battle. You need:&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;merge-base&quot; id=&quot;merge-base&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge-base master head&lt;/code&gt; - Don’t perform any operations, but print out the commit sha where &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; diverges from &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;. This should be the commit where you where on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; when you created this branch. You will want to rebase off of this commit instead of master to temporarily avoid dealing with any recent changes to master.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase -i --autosquash $(git merge-base master head)&lt;/code&gt; - do the above in one line, if you’re using bash (the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(...)&lt;/code&gt; gets evaluated and inserted by bash before executing the rest of the command).&lt;/p&gt;

&lt;h2 id=&quot;2-better-understand-a-merge-conflict&quot;&gt;2. Better understand a merge conflict&lt;/h2&gt;

&lt;p&gt;When you are resolving a merge conflict, git’s default two-sided (&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;) merge conflict markers sometimes leave you without knowing what changed on &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; that you are trying to resolve. To get a better view, use&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;conflict&quot; id=&quot;conflict&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --conflict=diff3 $file_with_merge_conflict&lt;/code&gt; - checkout the conflicted file with an additional merge conflict marker (&lt;code class=&quot;highlighter-rouge&quot;&gt;|||||||&lt;/code&gt;) that shows you what the original form of the code was before either branch modified it. I like this view enough to make it my default.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global merge.conflictstyle diff3&lt;/code&gt; - make the above your default.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;ours-theirs&quot; id=&quot;ours-theirs&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --ours $file&lt;/code&gt; - blow away the other branch’s file in favor of yours.
&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --theirs $file&lt;/code&gt; - blow away your own file in favor of the other branch’s.&lt;/p&gt;

&lt;h2 id=&quot;3-build-a-new-branch&quot;&gt;3. Build a new branch&lt;/h2&gt;

&lt;p&gt;Branches are transient, commits in master are forever. Sometimes the easiest way to dodge a horde of rebase trolls is simply to prepare a new branch off of master. With the right tools, this is quite trivial: you simply need to select the commits and/or patches that you want on your clean branch, no messing with the code required.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;cherry-pick&quot; id=&quot;cherry-pick&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git cherry-pick $sha&lt;/code&gt; - apply the commit specified by &lt;code class=&quot;highlighter-rouge&quot;&gt;$sha&lt;/code&gt; on top of your current head. You may want to use then when someone (including yourself) has made a commit on a separate branch that you want to incorporate into your branch without a whole merge and/or rebase dance.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;apply&quot; id=&quot;apply&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git apply $diff_file&lt;/code&gt; - apply the diff contained in &lt;code class=&quot;highlighter-rouge&quot;&gt;$diff_file&lt;/code&gt; as unstaged changes on your current head. You can easily generate such a diff using &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff ref &amp;gt; $diff_file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Maybe you’re at your wit’s end. You want to apply your changes in one fell swoop as a single commit, feature differentiation be damned, and move on with your life. There’s a tool for that.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;merge-squash&quot; id=&quot;merge-squash&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge --squash $feature_branch&lt;/code&gt; - the nuclear option. Pretend like you’re doing a merge, but all changes are left as unstaged instead of preserving any commits or their parents. In other words, make all the necessary changes to files that you need to get your current branch into the state it would be in after a merge of &lt;code class=&quot;highlighter-rouge&quot;&gt;$feature_branch&lt;/code&gt;. You can then add and commit as normal. This way, you can very easily avoid any rebase trolls, but still integrate your feature branch in a linear series of commits.&lt;/p&gt;

&lt;p&gt;For example, you could use this to build a clone of your feature branch that is now ready for a simple fast-forward merge pull request:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[feature] $ git checkout master
[master] $ git pull
[master] $ git checkout -b feature_new
[feature_new] $ git merge --squash feature
[feature_new] $ git add .
[feature_new] $ git commit -m &quot;My feature in one commit&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Of course, you can also use &lt;code class=&quot;highlighter-rouge&quot;&gt;git add $files&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;git add -p&lt;/code&gt; to build a more granular commit history.&lt;/p&gt;

&lt;h1 id=&quot;retreat&quot;&gt;Retreat!!&lt;/h1&gt;

&lt;p&gt;In any battle, it helps to know you have a safe way out. Git gives you multiple.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;abort&quot; id=&quot;abort&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase --abort&lt;/code&gt; - run away! This rebase has become to sticky and I want to try something else.
&lt;a name=&quot;reset&quot; id=&quot;reset&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard $ref&lt;/code&gt; - completely revert the state of my current branch to &lt;code class=&quot;highlighter-rouge&quot;&gt;$ref&lt;/code&gt;.
&lt;a name=&quot;clean&quot; id=&quot;clean&quot;&gt;&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git clean -df&lt;/code&gt; - after a reset, if you have untracked / new files or directories you also need to reset, this will get rid of them.&lt;/p&gt;

&lt;p&gt;A common form of the retreat is &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard origin/$branch_name&lt;/code&gt;. This will completely blow away any local changes you have on your branch and set your branch to the copy on origin. The end result is the same as if you deleted your local branch and checked out the remote branch. Note that you still need to &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; if there are changes that were pushed up since your last &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;victory-over-the-rebase-trolls&quot;&gt;Victory over the Rebase Trolls&lt;/h1&gt;

&lt;p&gt;Hopefully you have a budding comfort now with rebasing and the tools and weapons you have to vanquish the rebase trolls. As you continue on your journey, know that these trolls have no power over your code workflow and cannot stand in your way to beautiful code. Godspeed, good coder. Godspeed.&lt;/p&gt;

&lt;p&gt;Have any other rebasing issues you come up against? Did I say something stupid? Let me know in the comments below!&lt;/p&gt;</content><author><name></name></author><summary type="html">Recently, we’ve adopted rebasing into our git workflow. Because of this, we now enjoy clean, traceable, and roll-backable code history. Rebasing is great. However, it comes with a few issues, which I will call “rebase trolls”. Rebase trolls love to hide out in long-running branches, waiting to make a mockery of your best intentions when you suggest “hey, we should rebase this branch first before merging it into master”.</summary></entry><entry><title type="html">subjoins</title><link href="speaksoftly.io/2016/09/21/subjoins.html" rel="alternate" type="text/html" title="subjoins" /><published>2016-09-21T22:55:36-04:00</published><updated>2016-09-21T22:55:36-04:00</updated><id>speaksoftly.io/2016/09/21/subjoins</id><content type="html" xml:base="speaksoftly.io/2016/09/21/subjoins.html">&lt;h2 id=&quot;join-from-a-parent-class-to-associations-defined-in-subclasses&quot;&gt;Join from a parent class to associations defined in subclasses.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;#tl-dr-subjoins&quot;&gt;tl; dr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;http://eewang.github.io/blog/2013/03/12/how-and-when-to-use-single-table-inheritance-in-rails/&quot;&gt;single table inheritance&lt;/a&gt;. A lot. Maybe more than I should. But that’s not the point.&lt;/p&gt;

&lt;p&gt;We have a &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; class, that has subclasses such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Admin&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;Client&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor&lt;/code&gt; has an association: &lt;code class=&quot;highlighter-rouge&quot;&gt;has_one :profile&lt;/code&gt;, which contains some useful info. Often times I’ll be accessing a whole bunch of Users that I know are all Contractors. Say, &lt;code class=&quot;highlighter-rouge&quot;&gt;project.users.where(type: &quot;Contractor&quot;)&lt;/code&gt;. Well doesn’t it make sense at this point that I should be able to join to &lt;code class=&quot;highlighter-rouge&quot;&gt;:profile&lt;/code&gt; now that I’m dealing with only &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor&lt;/code&gt;s?&lt;/p&gt;

&lt;p&gt;Well for this basic case, that’s really quite easy: &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor.all.merge(project.users).joins(:profile)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In fact, we can easily make this another &lt;a href=&quot;blog/2016/06/03/secret/&quot;&gt;secret extension&lt;/a&gt; in our file &lt;code class=&quot;highlighter-rouge&quot;&gt;active_record_extension.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;as_subclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;subclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Great! We’re done here.&lt;/p&gt;

&lt;p&gt;Or are we?&lt;/p&gt;

&lt;p&gt;So you might have noticed that this method will in fact force the &lt;code class=&quot;highlighter-rouge&quot;&gt;type == 'Contractor'&lt;/code&gt; requirement on your query even if you didn’t do so youself. Well now that gets me thinking. Can we &lt;code class=&quot;highlighter-rouge&quot;&gt;LEFT JOIN&lt;/code&gt; to profile on a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;s that aren’t all &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor&lt;/code&gt;s? That is, &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;s that happen to be &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor&lt;/code&gt;s (and have a profile, which is all of them) will get joins to a &lt;code class=&quot;highlighter-rouge&quot;&gt;:profile&lt;/code&gt; record, while others will have &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; for those joined columns.&lt;/p&gt;

&lt;p&gt;Why, yes. Yes we can. Once again we will make heavy use of &lt;a href=&quot;http://jpospisil.com/2014/06/16/the-definitive-guide-to-arel-the-sql-manager-for-ruby.html&quot;&gt;arel&lt;/a&gt;, to the point that even this link doesn’t cover all of what we need to know. To the point that I’m still not quite sure what to do about through associations, but maybe I’ll come back another time to update this post when I figure that out.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;tl-dr-subjoins&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activate_secret_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subjoins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;SELECT `users`.* FROM `users` &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     LEFT OUTER JOIN `admin_profiles` ON `users`.`type` IN ('Admin') AND `admin_profiles`.`user_id` = `users`.`id` &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     LEFT OUTER JOIN `contractor_profiles` ON `users`.`type` IN ('Contractor') AND `contractor_profiles`.`user_id` = `users`.`id`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     WHERE (users.deleted = false)&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Oh, did I mention that &lt;code class=&quot;highlighter-rouge&quot;&gt;Admin&lt;/code&gt; also has a &lt;code class=&quot;highlighter-rouge&quot;&gt;:profile&lt;/code&gt; assocaition too that is defined differently using a different table? And that this solution &lt;code class=&quot;highlighter-rouge&quot;&gt;LEFT JOIN&lt;/code&gt;s to both tables appropriately? Oh, no? Well it does.&lt;/p&gt;

&lt;p&gt;Here’s how we accomplish this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;# currently does not work with :through associations&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subjoins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;associations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descendants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reflect_on_association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;associations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;none?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Reflection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ThroughReflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NotImplementedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NIY for through associations&quot;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;bind_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;associations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;base_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreign_klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assocs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conditions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assocs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;join_arel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;join_condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join_arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;bind_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join_arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind_values&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inheritance_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subclasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:or&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreign_klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OuterJoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bind_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s break this down.&lt;/p&gt;

&lt;p&gt;Considering only &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor&lt;/code&gt; for the moment, We want to do a &lt;code class=&quot;highlighter-rouge&quot;&gt;LEFT JOIN&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;contractor_profiles&lt;/code&gt; where the user is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor&lt;/code&gt; AND the profile’s &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; matches.&lt;/p&gt;

&lt;p&gt;Generalizing, we need to find the subclass, or subclasses, that contain the association named &lt;code class=&quot;highlighter-rouge&quot;&gt;:profile&lt;/code&gt;, and to a &lt;code class=&quot;highlighter-rouge&quot;&gt;LEFT JOIN&lt;/code&gt; for each associations. Like I often do, I’m going to make Rails do the heavy lifting of generating the join conditions, and I’ll step in only to direct the orchestra of hack. So where do we start?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;associations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descendants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reflect_on_association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;present?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This selects descendants that have the named assocaition (via the awesomely named &lt;code class=&quot;highlighter-rouge&quot;&gt;reflect_on_association&lt;/code&gt; method, which safely returns &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; when the association is not defined). The output here is a Hash where the keys are subclasses and the values are the associations: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Contractor&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&amp;lt;assocation&amp;gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;Admin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&amp;lt;association&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have the full list of associations linked to each subclass, we need to combine them. As the full solution hinted, we need to combine the join conditions (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;contracotor_profiles.user_id = users.id&lt;/code&gt;) with the condition that &lt;code class=&quot;highlighter-rouge&quot;&gt;users.type = 'Contractor'&lt;/code&gt;. Or, more throughly, &lt;code class=&quot;highlighter-rouge&quot;&gt;users.type IN (#{list of Contractor subtypes})&lt;/code&gt;. This is acomplished via the line&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inheritance_column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subclasses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, the part before the &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; gives us the type condition, but using the inheritance column because it’s possible to set that to something other than &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;type&quot;&lt;/code&gt;. It finds all the subclasses and dumps them into the the &lt;code class=&quot;highlighter-rouge&quot;&gt;IN&lt;/code&gt; operator as we said we should. Note that in your developemnt environment, due to lazy-loading, this list is empty until you explicitly load subclasses, so you have to do that first for this to work. Simply instantiate their classes and Rails will do that for you.&lt;/p&gt;

&lt;p&gt;After the &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;join_condition&lt;/code&gt;, which is defined above. Specifically, it is the correct join condition generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;Contractor.joins(:profile)&lt;/code&gt;. Letting Rails do the correct generation of that join condition depending on the association type, we can get that using&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;join_arel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;join_condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join_arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now what’s up with &lt;code class=&quot;highlighter-rouge&quot;&gt;last.right.expr&lt;/code&gt;? To be honest, this is something of a best guess. As far as I can tell, &lt;code class=&quot;highlighter-rouge&quot;&gt;join_sources&lt;/code&gt; is an array with one element per table joined table. For a direct (not &lt;code class=&quot;highlighter-rouge&quot;&gt;:through&lt;/code&gt;) associations, this seems to be a 1-element Array. For a &lt;code class=&quot;highlighter-rouge&quot;&gt;:through&lt;/code&gt; associations, the intermediate tables come first. So while we’re not yet supporting through associations, I’m just going to remind myself of that by selecting &lt;code class=&quot;highlighter-rouge&quot;&gt;join_sources.last&lt;/code&gt;. From here, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt;, where  &lt;code class=&quot;highlighter-rouge&quot;&gt;joins_sources.last.left&lt;/code&gt; is the arel table being joined to, and &lt;code class=&quot;highlighter-rouge&quot;&gt;joins_sources.last.right&lt;/code&gt; is the condition ON which this join is predicated. To illustrate:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Contractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;ON `contractor_profiles`.`user_id` = `users`.`id`&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is the part we want, so this is the part we’ve taken. Lastly, we need just the expression without the &lt;code class=&quot;highlighter-rouge&quot;&gt;ON&lt;/code&gt; operator, since we’re going to use that operator ourselves. Thus, &lt;code class=&quot;highlighter-rouge&quot;&gt;join_arel.join_sources.last.right.expr&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Contractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:profile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`contractor_profiles`.`user_id` = `users`.`id`&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So that’s how we get the join conditions for each assocaition, combining a type condition with the appropriate join condition for that type, and storing this new combination in the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;conditions&lt;/code&gt;. We then add this to the join stack using&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreign_klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Arel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OuterJoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conditions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;foreign_klass&lt;/code&gt; is the class of the association, defined by the outer loop.&lt;/p&gt;

&lt;p&gt;Ok so what the heck is the outer loop?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;associations.group_by{|klass, assoc| assoc.klass.base_class}&lt;/code&gt; groups all the the descendants’ assocations by their base_class. This accounts for the fact that some subclasses’ associations by the same name could be to the same table, where only one &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; is needed for the group of them. In our first example with &lt;code class=&quot;highlighter-rouge&quot;&gt;AdminProfile&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;ClientProfile&lt;/code&gt; case, these were different tables, and we needed a &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt; for each. To illustrate the case for grouping, consider two subclasses of a &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; class: &lt;code class=&quot;highlighter-rouge&quot;&gt;TrancsriptionService&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;AlignmentServivce&lt;/code&gt;. Both of these have an &lt;code class=&quot;highlighter-rouge&quot;&gt;:output_transcript&lt;/code&gt; association, defined separately, but both of these associations are of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; class:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activate_secret_extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subjoins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:output_transcript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; SELECT `services`.* FROM `services`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    LEFT OUTER JOIN `transcripts` ON (&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      `services`.`type` IN ('AlignmentService') AND `transcripts`.`service_id` = `services`.`id` AND `transcripts`.`type` IN ('AlignedTranscript') AND `transcripts`.`archived` = 0 &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    OR&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#      `services`.`type` IN ('TranscriptionService') AND `transcripts`.`service_id` = `services`.`id` AND `transcripts`.`type` IN ('TranscribedTranscript') AND `transcripts`.`archived` = 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    )&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    WHERE (services.deleted = 0)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that only one &lt;code class=&quot;highlighter-rouge&quot;&gt;LEFT OUTER JOIN&lt;/code&gt; was generated for this example, but that the conditions for the two associations were &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt;‘d together using the &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce(&amp;amp;:or)&lt;/code&gt;, allowing us to join to both association types in the same &lt;code class=&quot;highlighter-rouge&quot;&gt;JOIN&lt;/code&gt;. This is because we’ve collected all the join_conditions for the group associatied with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; base_class and imposed them all in one go. Go us!&lt;/p&gt;

&lt;p&gt;Piecing it all together, we return &lt;code class=&quot;highlighter-rouge&quot;&gt;self.all.joins(*arel.join_sources)&lt;/code&gt; at the end, and this gives us our grand total joins query that accounts for the subclass-specific associations! (Though we’re safe about it and only do the joins if there are things to join to – ActiveRecord will complian otherwise.)&lt;/p&gt;

&lt;p&gt;Ok, one last thing. What are these &lt;code class=&quot;highlighter-rouge&quot;&gt;bind_values&lt;/code&gt;? Well, you may have noticed a few default scopes in the last example: &lt;code class=&quot;highlighter-rouge&quot;&gt;archived = 0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;deleted = 0&lt;/code&gt;. These are generated using “bind values”, which I am very unable to find good documentation on. However, notice:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;no&quot;&gt;TranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:output_transcript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;INNER JOIN `threeplay_transcripts` ON `threeplay_transcripts`.`service_id` = `services`.`id` AND `threeplay_transcripts`.`type` IN ('TranscribedTranscript') AND `threeplay_transcripts`.`archived` = ?&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;we have a missing value for &lt;code class=&quot;highlighter-rouge&quot;&gt;archived&lt;/code&gt; here. Well, with much poking around, I found it here:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;no&quot;&gt;TranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:output_transcript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind_values&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[#&amp;lt;ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::Column:0x007fb89daaca50 @strict=true, @collation=nil, @extra=&quot;&quot;, @name=&quot;archived&quot;, @cast_type=#&amp;lt;ActiveRecord::Type::Boolean:0x007fb8a7a89320 @precision=nil, @scale=nil, @limit=1&amp;gt;, @sql_type=&quot;tinyint(1)&quot;, @null=true, @default=&quot;0&quot;, @default_function=nil&amp;gt;, false]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first value here is some label for the bind value, and the last, &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;, is the value we actually need. And the only way I can figure out how to use this value is in ActiveRecord, not Arel, so we collect these bind_values in the inner loop (&lt;code class=&quot;highlighter-rouge&quot;&gt;bind_values += join_arel.bind_values&lt;/code&gt;), and use them all in one go at the very end using&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;bind_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This seems to work, though I have a very poor understanding of how robustly.&lt;/p&gt;

&lt;p&gt;The last thing I’ll note about bind values is that while these bind values came from the Arel object, there are cases where you can only get them from the ActiveRecord object:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;no&quot;&gt;TranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;state: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ready&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind_values&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; []&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;TranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;state: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ready&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bind_values&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#=&amp;gt; [[#&amp;lt;ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::Column:0x007fb89c7c8510 @strict=true, @collation=&quot;utf8_general_ci&quot;, @extra=&quot;&quot;, @name=&quot;state&quot;, @cast_type=#&amp;lt;ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter::MysqlString:0x007fb8a01cada8 @precision=nil, @scale=nil, @limit=255&amp;gt;, @sql_type=&quot;varchar(255)&quot;, @null=true, @default=nil, @default_function=nil&amp;gt;, &quot;ready&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We would need to collect bind values this way if we were playing with &lt;code class=&quot;highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; conditions:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;no&quot;&gt;TranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;state: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ready&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT `services`.* FROM `services` WHERE `services`.`type` IN ('TranscriptionService') AND (services.deleted = 0) AND `services`.`state` = ?&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But that’s about enough exploring of that for now. I hope to learn more about bind values and how to more robustly use them in these types of query manipulations, but I will close this post about subjoins at that. Right now I’m just psyched that I can join to subclass-specific associations from a parent class. I’ll probably only actually use the &lt;code class=&quot;highlighter-rouge&quot;&gt;as_subclass&lt;/code&gt; version, because really it’s not the responsbility of the parent class to know about the subclasses’ details, but man this was a fun exercise!&lt;/p&gt;</content><author><name></name></author><summary type="html">Join from a parent class to associations defined in subclasses.</summary></entry><entry><title type="html">objectification</title><link href="speaksoftly.io/2016/07/28/objectification.html" rel="alternate" type="text/html" title="objectification" /><published>2016-07-28T14:26:02-04:00</published><updated>2016-07-28T14:26:02-04:00</updated><id>speaksoftly.io/2016/07/28/objectification</id><content type="html" xml:base="speaksoftly.io/2016/07/28/objectification.html">&lt;h2 id=&quot;object-over-orientation&quot;&gt;Object Over-Orientation&lt;/h2&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transcript_sort&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What is this method doing? As its name correctly implies, its intended usage was to sort a transcript: specifically, a timed text transcript represented as a Hash with timestamps in the keys and words in the values.&lt;/p&gt;

&lt;p&gt;So what’s it doing on &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Ignoring that it effectively does the same thing as the built-in Ruby &lt;a href=&quot;http://ruby-doc.org/core-1.8.7/Hash.html#method-i-sort&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#sort&lt;/code&gt;&lt;/a&gt; (&amp;lt;2.0) or the equivalent method from &lt;a href=&quot;http://ruby-doc.org/core-2.2.2/Enumerable.html#method-i-sort&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt;&lt;/a&gt; call edon &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; objects (&amp;gt;=2.0), this method shouldn’t be here. This code forces every single instnace of &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; to be aware of this method called &lt;code class=&quot;highlighter-rouge&quot;&gt;trancsript_sort&lt;/code&gt;, even if it hasn’t two ducks about this “transcript” object.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;x:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;0,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;y:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.transcript_sort&lt;/span&gt;&lt;/code&gt;. Sure.&lt;/p&gt;

&lt;p&gt;Oh, but it’s just one little simple method, what’s the harm?&lt;/p&gt;

&lt;p&gt;The following is a real-world example from the same code base. No need to parse the method too closely, but you do get bonus points for appreciating how &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare_interpolation&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;finalize_interpolation&lt;/code&gt; are methods that were inserted into &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; for similarly specific purposes.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hash&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;split_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paragraph_starts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no_break_up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_word_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sorted_words&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transcript_sort&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add_blank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sorted_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each_with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepare_interpolation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_break_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_word_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;next_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;blank?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_blank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paragraph_starts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_blank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;new_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;finalize_interpolation&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_stamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;add_blank&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;editorial_note?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end_of_sentence?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sorted_words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_words&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###So what’s the skinny on this fat model?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transcript_sort&lt;/code&gt; and these associated method apply only to a specific data object: the transcript as described above. It’s not only confusing to other devs (especially new ones exploring objects new to them) to insert such methods into core Ruby classes, it’s memory bloat and it’s just begging for name conflicts. Import some code that also modifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;? Here’s hoping they didn’t choose any of the same method names as you. May the odds be ever in your favor. It’s mixing concerns, it’s not good for unit testing, and shoving various concerns’ code into other classes increases the amount of code another developer needs to parse through to understand something completely unrelated to the task at hand.&lt;/p&gt;

&lt;p&gt;The first thing I did to this code when I had a chance was to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; class that contained all the logic related to this transcript object. This class still stores the same data as the &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt; version, but rather than assimilating &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;, it simply uses one as a data member. Ideally, we could have a &lt;code class=&quot;highlighter-rouge&quot;&gt;sort_words&lt;/code&gt; method here that returned another &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; object with the words sorted (or &lt;code class=&quot;highlighter-rouge&quot;&gt;sort_words!&lt;/code&gt; for in-place). However, for compatiblilty with more code than I could change in one sitting, I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript#sorted_words&lt;/code&gt; method that returned the same array of [timestamp, words], sorted by timestamp.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Transcript&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sorted_words&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


  &lt;span class=&quot;c1&quot;&gt;# NIY in real life, but more ideal:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort_words&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;deep_dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_words!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort_words!&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@words&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort_by!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###Over-objectification&lt;/p&gt;

&lt;p&gt;The concern-mixing, namespace-conflicting, method-fixing style of coding is a common anti-pattern I have begun to observe. It often comes from new developers or developer new to object-oriented programming or more comfortable with more purely &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional programming&lt;/a&gt;. Loathe though I am to admit it, this usage seems almost encouraged by the structure of Ruby in its beautfully stubborn insistance that, no, really, &lt;em&gt;everything&lt;/em&gt; is an object. There seems encouragement that &lt;code class=&quot;highlighter-rouge&quot;&gt;object.do_something&lt;/code&gt; is the One True Way to do anything at all to &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;. Ruby’s own terminology considers calling a method on an object “passing a message to it”. While there are some great advantages to this way of interpreting code, it’s not hard to see that, misapplied, it can confuse the concept of a well-organized class to a new developer. You get &lt;code class=&quot;highlighter-rouge&quot;&gt;MyModel#compute_complicated_stuff&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ComplicatedStuffComputer.new(my_model).compute&lt;/code&gt;. You get &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#split_words&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript#split_words&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s not just new developers that are affected. Rails is one of the largest offenders. Just take a peek at how many Ruby core classes are overridden within the Rails framework. You can debate how convenient it is, how the benefits outweight the costs, or just that you think it was for any reason the right call for Rails. I still hold that it encourages over-objectification in developers learning on Rails.&lt;/p&gt;

&lt;p&gt;The Rails scaffolding itself leaves many people believeing that the types of classes you make are ActiveRecord-backed models in app/models, and miscelaneous other utilities in the “lib” junk-drawer (there’s a &lt;a href=&quot;http://blog.codeclimate.com/blog/2012/02/07/what-code-goes-in-the-lib-directory/&quot;&gt;better way&lt;/a&gt;). If you’ve worked in Rails, you’ve probably heard “fat model, skinny controller”, which all but encourages dumping all sorts of methods into ActiveRecord models. There’s a &lt;a href=&quot;https://robots.thoughtbot.com/skinny-controllers-skinny-models&quot;&gt;better way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Virtually all gems in popular use by Rails projects have this pattern of injecting their own methods into ActiveRecord::Base or something similar. It’s usually kept to a minimum, just defining the method that “enables” the gem for a given model. E.g., &lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;acts-as-taggable-on&lt;/a&gt; defines the methods &lt;code class=&quot;highlighter-rouge&quot;&gt;acts_as_taggable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;acts_as_tagger&lt;/code&gt; on ActiveRecord::Base. &lt;a href=&quot;https://github.com/state-machines/state_machines&quot;&gt;state-machines&lt;/a&gt; defines &lt;code class=&quot;highlighter-rouge&quot;&gt;state_machine&lt;/code&gt;. By itself, that’s fine: you accept when you install a gem that you’re configuring your environment, often ActiveRecord specifically, to work a certain way. But this contributes to why I think a lot of the existing framework out there encourages the anti-pattern of over-objectification.&lt;/p&gt;

&lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

&lt;p&gt;It is possible to beat this.&lt;/p&gt;

&lt;p&gt;As mentioned above, the easy fix to the transcript methods scattered throughout &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; was to create an isolatable &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; class that contained all of its own logic. This class then allows us to add new features to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; class without all the clutter or scatter, and keeps the domain simple and intuitive. You can build utility methods that require a &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; object and know exactly how to interact with its public methods. For example, a format converter that parses a &lt;code class=&quot;highlighter-rouge&quot;&gt;Transcript&lt;/code&gt; and turns it into closed caption frames. This makes it obvious how to invoke this converted, rather than having to study how to morph your words into the exact specification implicitly documented by usage of transcript-hashes. This is what object oriented programming is about.&lt;/p&gt;

&lt;p&gt;Expliring this style of code organization and conceptualization can bring about the best in what any object-oriented language has to offer. In Ruby, and especially Rails, we just have to try a little harder to encourage it.&lt;/p&gt;

&lt;p&gt;Here’s some great further reading on motivations and methods for factoring out cluttered code into more isolated models, specifically geared toward Rails projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://robots.thoughtbot.com/skinny-controllers-skinny-models&quot;&gt;Skinny controllers, skinny models&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.engineyard.com/2014/keeping-your-rails-controllers-dry-with-services&quot;&gt;Keeping your Rails controllers DRY with services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design&quot;&gt;The secret to Rails OO design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&quot;&gt;7 ways to decompose fat ActiveRecord models&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Object Over-Orientation</summary></entry><entry><title type="html">bulk_insert</title><link href="speaksoftly.io/2016/06/03/bulk-insert.html" rel="alternate" type="text/html" title="bulk_insert" /><published>2016-06-03T17:38:15-04:00</published><updated>2016-06-03T17:38:15-04:00</updated><id>speaksoftly.io/2016/06/03/bulk-insert</id><content type="html" xml:base="speaksoftly.io/2016/06/03/bulk-insert.html">&lt;h2 id=&quot;insert-thousands-of-records-in-an-instant-even-in-rails&quot;&gt;Insert thousands of records in an instant. Even in Rails.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#tl-dr-bulk_insert&quot;&gt;tl; dr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, you just need to create a lot of records.&lt;/p&gt;

&lt;p&gt;We have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; model, and when someone on our operations team wants to open that job up to a market, we create &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; records. Thousdans of them. You may know enough of Rails to know that this can be get slow without some care. You could disable validations, but you’re still contacting the db once for each create.&lt;/p&gt;

&lt;p&gt;A common solution is to use an asyncronous task maamnger like Resque. This kind of sucks, though, because now the the action is delayed and there’s no immediate feedback to the ops manager. They click, the request gets completed OK, then they have to wait some undetermined amount of time to check if it worked.&lt;/p&gt;

&lt;p&gt;I’ve got a better idea. Use SQL’s &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO&lt;/code&gt; feature. This isn’t implemented in Rails as of yet. It comes with a host of potential problems: it won’t run validations or callbacks, for starters. But for the benefit of immediate response (it really is speedy!), we’ll accept the sacrifice of having to make sure we’re creating records correctly.&lt;/p&gt;

&lt;p&gt;The biggest trick is forming the syntax. I’ve been getting into more Arel, but the insert manager is poorly documented. Meanwhile, we can construct the SQL ourselves with some care. For requirements, we want to pass an Array of attributes Hashes that will be properly sanitized (including serialized attributes). Luckily, ActiveRecord::Base includes a &lt;code class=&quot;highlighter-rouge&quot;&gt;sanitize&lt;/code&gt; method that handles that for us. Because of SQL’s syntax, we’re going to require that all of the attributes Hashes in the Array have the same keys.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;tl-dr-bulk_insert&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;active_record_extension.rb&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bulk_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bulk_insert_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bulk_insert_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Attribute array must all have the same keys. Expected &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sanitize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fields_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/`/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;)&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;values_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields_string&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; VALUES &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values_string&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a little dense, so let’s break it down:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;First, we use the keys of the first attributes Hash as the field names.&lt;/li&gt;
  &lt;li&gt;We then map each of the Hash values into an Array of sanitized values and confirm that each Hash has the same keys.&lt;/li&gt;
  &lt;li&gt;We have to manually sanitize the field names, since I can’t find an ActiveRecord method that does that. As long as we strip backticks (`) and wrap field names in a single set of the same, we’re good to go. The fields will exist or they will not, and no unintended SQL can be injected. Worst case is the SQL server will complain that the field does not exist. We surround the whole list in parentheses.&lt;/li&gt;
  &lt;li&gt;We wrap each array of values, already sanitized, in parentheses, and join the results with a comma.&lt;/li&gt;
  &lt;li&gt;We’re ready to go, so we piece it all together in an &lt;code class=&quot;highlighter-rouge&quot;&gt;INSERT INTO&lt;/code&gt; statement.&lt;/li&gt;
  &lt;li&gt;Finally, we use the raw SQL using &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base.connection.execute()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we include these methods into ActiveRecord, it’s as simple as &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess.bulk_insert(attributes_array)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Be careful with this one. You can violate a lot of Rails data validations extremeley easily using this tool.&lt;/p&gt;</content><author><name></name></author><summary type="html">Insert thousands of records in an instant. Even in Rails. tl; dr</summary></entry><entry><title type="html">secret</title><link href="speaksoftly.io/2016/06/03/secret.html" rel="alternate" type="text/html" title="secret" /><published>2016-06-03T09:15:10-04:00</published><updated>2016-06-03T09:15:10-04:00</updated><id>speaksoftly.io/2016/06/03/secret</id><content type="html" xml:base="speaksoftly.io/2016/06/03/secret.html">&lt;h2 id=&quot;add-features-to-a-core-class-activerecord-without-really-adding-them&quot;&gt;Add features to a core class (ActiveRecord) without really adding them&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#tl-dr-secret&quot;&gt;tl; dr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve been keeping a file of extensions to ActiveRecord that I find useful. I’ve blooged about one of them already. In many cases, while poking around our app in the console, I’ve wanted to use some of these features. To the extent that my toys are confined to their own modules, that’s fine, but I feel a little sketchy about adding a list of untested features to &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base&lt;/code&gt;. Other developers in my team start finding and using them, then we discover a bug, and I don’t have time to support it, and we have a mess. So these extensions had not, until recently made it into our app.&lt;/p&gt;

&lt;p&gt;However, there came a time when I really wanted one of these features actually used by our app. Specifically, &lt;code class=&quot;highlighter-rouge&quot;&gt;bulk_insert&lt;/code&gt; for a &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; model – I’ll write a post about it soon. This was going to be a huge time save in a cricitcal part of our app. I was comfortable using my &lt;code class=&quot;highlighter-rouge&quot;&gt;bulk_insert&lt;/code&gt; extension for this case beause I knew its behavior well enough to know that it would work with this model. And I wanted to use clean code rather than writing out manual SQL that would be a pain to maintain and update as the model changed. Nevertheless, I still didn’t want it generally available, at least easily, much less other features in my &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecordExtensions&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;So here was my compromise:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess.activate_secret_extensions.bulk_insert(...)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The use here is that anyone &lt;em&gt;can&lt;/em&gt; access the extensions by chaining the &lt;code class=&quot;highlighter-rouge&quot;&gt;activate_secret_extensions&lt;/code&gt; method. It’s simply and clean to use. But the method name itself serves as the red flag that this isn’t a core feature and that it might not be the best solution unless you know what you’re doing.&lt;/p&gt;

&lt;p&gt;The requirements here are that (1) &lt;code class=&quot;highlighter-rouge&quot;&gt;activate_secret_extensions&lt;/code&gt; has to return an object that is like a JobAccess_Relation in all ways except that it has additional extnesions attached, &lt;em&gt;but&lt;/em&gt; (2) these extensions have to be limited to this call and should &lt;em&gt;not&lt;/em&gt; be added to &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; generally. Thus modifying the &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; class in place is not an option.&lt;/p&gt;

&lt;p&gt;This is ruby, and classes are just objects. Objects have singleton classes (&lt;a href=&quot;http://www.devalot.com/articles/2008/09/ruby-singleton&quot;&gt;this&lt;/a&gt; is a really good read on that if you are looking for one). When I see a task like this, I think of modifying the singleton class. This can work really well to add methods to a specific instance without affecting the class.&lt;/p&gt;

&lt;p&gt;But there’s a problem. The instance here is in fact the constant class &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt;. If we modify its singleton class, we’re modifying the singleton class of JobAccess itself. This violates requirement #2.&lt;/p&gt;

&lt;p&gt;So at first I tried things like &lt;code class=&quot;highlighter-rouge&quot;&gt;dup&lt;/code&gt;ing the class. This worked for the single line in question, but has the potential of leading to some major headaches because a lot of things depend on matching an ActiveRecord class or its name.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;softly&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ExtendedJobAccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JobAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ExtendedJobAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ExtendedJobAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;ExtendedJobAccess id: ... &amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ExtendedJobAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;softly&quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;JobAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;speak&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# NoMethodError: undefined method `speak' for #&amp;lt;JobAccess:0x007fc27b130390&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So far so good…&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ExtendedJobAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JobAccess&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Less good… this could break a lot of code. Things get even worse with STI models, since these rely on the class name. Consdier &lt;code class=&quot;highlighter-rouge&quot;&gt;TranscriptionService &amp;lt; Service&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ExtendedTranscriptionService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;TranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 934997&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ExtendedTranscriptionService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can see why by examining the query:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`services`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`services`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`type`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ExtendedTranscriptionService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deleted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are no elements of the &lt;code class=&quot;highlighter-rouge&quot;&gt;services&lt;/code&gt; table that have `TYPE = ‘ExtendedTranscriptionService’. This is a show stopper.&lt;/p&gt;

&lt;p&gt;Here’s the approach I settled on, which works quite well. You may have noticed that ActiveRecord blurs the lines between class methods and collection methods. You can define class methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; and use them anywhere in a scope chain: &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess.scope1.scope2.class_method1.scope3.class_method2&lt;/code&gt; and so on. What’s actually going on is that these class methods on your model get defined as instance methods on a ActiveRecord_Relation model namespaced under your model:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;JobAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;## Note: Rails 4 syntax. In Rails 3, use JobAccess.scoped&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; JobAccess::ActiveRecord_Relation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This relation model contains all the methods you probably think of as “class” methods on your model:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;JobAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecord_Relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This opens up a much neater approach. Since any query on the &lt;em&gt;class&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; returns an &lt;em&gt;instance&lt;/em&gt; of a &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAcess::ActiveRecord_Relation&lt;/code&gt;, we can modify the singleton class of this instance and we’re in the clear! The only remaining catch is that we want the methods to exist on &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; as well as the relation, but when we’re calling it from &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt; itself we don’t yet have a relation. So we can create one:&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;tl-dr-secret&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecordExtension&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;activate_secret_extensions&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SecretExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So now,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All of &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::Base&lt;/code&gt; has access to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;activate_secret_extensions&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Calling &lt;code class=&quot;highlighter-rouge&quot;&gt;activate_secret_extensions&lt;/code&gt; adds any methods defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecordExtension::Base&lt;/code&gt;, which is pasted below for reference.&lt;/li&gt;
  &lt;li&gt;ActiveRecord then for free gives us chainable methods for free – this just just like defining class methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;JobAccess&lt;/code&gt;, except these method definitions are limited to this specific query. As a bonus, these methods do in fact propagate through the chain, so we only need to call &lt;code class=&quot;highlighter-rouge&quot;&gt;activate_secret_extensions&lt;/code&gt; once for a given object in memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s my current list of secretly-accepted extensions&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecordExtension&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SecretExtension&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bulk_insert_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Attribute array must all have the same keys. Expected &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, got &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;', '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sanitize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fields_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/`/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;`&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;)&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;values_string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields_string&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; VALUES &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values_string&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bulk_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bulk_insert_sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Simple left join taking advantage of existing Rails &amp;amp; Arel code&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;left_joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;inner_joins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;left_joins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner_joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Arel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;OuterJoin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left_joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_unscoped_joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;unscoped_joins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;join_condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foreign&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;join_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;relation&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join_condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join_sources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Find records of self where no records of given association exist&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;without&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reflect_on_association&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;left_joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;table_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;primary_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# perform a count of results even if GROUP BY was issued&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer_count&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select COUNT(*) from (&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_sql&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) results&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;activate_secret_extensions&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SecretExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ActiveRecordExtension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Add features to a core class (ActiveRecord) without really adding them tl; dr</summary></entry><entry><title type="html">monomorphic</title><link href="speaksoftly.io/2016/04/22/monomorphic.html" rel="alternate" type="text/html" title="monomorphic" /><published>2016-04-22T17:27:34-04:00</published><updated>2016-04-22T17:27:34-04:00</updated><id>speaksoftly.io/2016/04/22/monomorphic</id><content type="html" xml:base="speaksoftly.io/2016/04/22/monomorphic.html">&lt;h2 id=&quot;join-to-a-a-single-resource-type-in-a-polymorphic-assocaition&quot;&gt;Join to a a single resource type in a polymorphic assocaition&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#tl-dr-monomorphic&quot;&gt;tl; dr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to :resource, polymorphic: true&lt;/code&gt; is great, but don’t tell me you’ve never wanted to scope that to &lt;code class=&quot;highlighter-rouge&quot;&gt;where(resource_type: &quot;Foo&quot;)&lt;/code&gt;. To use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar.joins(:foo)&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;:foo&lt;/code&gt; is one of many resource_types.&lt;/p&gt;

&lt;p&gt;You probably already found out you can’t &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.joins(:resource)&lt;/code&gt;. This make sense, SQL can’t perform a join on each row to multiople table depending on &lt;code class=&quot;highlighter-rouge&quot;&gt;resource_type&lt;/code&gt;. The resulting joined table structure would be nonsensical. But in this case, you only want to join to the &lt;code class=&quot;highlighter-rouge&quot;&gt;foos&lt;/code&gt; table, so why can’t you do it?  Because &lt;code class=&quot;highlighter-rouge&quot;&gt;.joins(:resource)&lt;/code&gt; needs to evaluate to something, and it can’t.&lt;/p&gt;

&lt;p&gt;Write your own join? Then you lose all the benefits of Rails associations, including eager loading.&lt;/p&gt;

&lt;p&gt;Somewhere ((here)[]?) you may have found a solution I did as well:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'resource_id'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yay:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;ActiveRecord::Relation [#&amp;lt;Bar id: 1, resource_type: &quot;Foo&quot;, resource_id: 1, foo_id: 1, deleted: false&amp;gt;]&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Boo:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; ActiveRecord::StatementInvalid: Mysql2::Error: Unknown column 'bars.resource_type' in 'where clause': SELECT  `foos`.* FROM `foos` WHERE `foos`.`deleted` = 0 AND `foos`.`id` = 1 AND `bars`.`resource_type` = 'Foo' LIMIT 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Huh? No column bars.resource_type? Sure: the SQL generated by the association getter method only looks for a &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; with the matching id. It doesn’t join to, and therefore doesn’t have access to, the &lt;code class=&quot;highlighter-rouge&quot;&gt;bars&lt;/code&gt; table. However we have added a scope that references the &lt;code class=&quot;highlighter-rouge&quot;&gt;bars&lt;/code&gt; table that we are not joining to, and so the SQL statement balks. So that means the fix is simple:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'resource_id'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Provided, of course, the &lt;code class=&quot;highlighter-rouge&quot;&gt;:bar&lt;/code&gt; assocaiton is set up correclty on class &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;. Note that this may be a &lt;code class=&quot;highlighter-rouge&quot;&gt;has_one&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many&lt;/code&gt; for your application, and for the latter of course you need to &lt;code class=&quot;highlighter-rouge&quot;&gt;joins(:bars)&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;joins(:bar)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course we could just use &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar.first.resource&lt;/code&gt;, but it doesn’t feel right to leave this dangling error-prone method out there.&lt;/p&gt;

&lt;p&gt;Yay:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Foo id: 1, deleted: false&amp;gt;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Bar id: 1, resource_type: &quot;Foo&quot;, resource_id: 1, foo_id: 1, deleted: false&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we’re done … ? Nope. There’s one more complication. Let’s add another resource_type to the mix:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'resource_id'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Baz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'resource_id'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baz&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The existence of bar2 is critical in disvoering the following bug, which we’ll explain just below.&lt;/p&gt;

&lt;p&gt;Boo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bar.first
# =&amp;gt; #&amp;lt;Bar id: 1, resource_type: &quot;Foo&quot;, resource_id: 1, foo_id: 1, deleted: false&amp;gt;
Bar.first.resource
# =&amp;gt; #&amp;lt;Foo id: 1, deleted: false&amp;gt;
Bar.first.foo
# =&amp;gt; #&amp;lt;Foo id: 1, deleted: false&amp;gt;
Bar.first.baz
# =&amp;gt; #&amp;lt;Baz id: 1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bar.first&lt;/code&gt;’s resource is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;, not a &lt;code class=&quot;highlighter-rouge&quot;&gt;Baz&lt;/code&gt;, and yet it’s incorrectly returning to us a &lt;code class=&quot;highlighter-rouge&quot;&gt;Baz&lt;/code&gt; when we ask for it! &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar.first&lt;/code&gt; does not have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Baz&lt;/code&gt;, so we should be getting &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt; here. What’s happening is that when ActiveRecord is generates the query for &lt;code class=&quot;highlighter-rouge&quot;&gt;bar.baz&lt;/code&gt;, once again it drives the query off of the &lt;code class=&quot;highlighter-rouge&quot;&gt;bazes&lt;/code&gt; table with poor regard for the &lt;code class=&quot;highlighter-rouge&quot;&gt;bars&lt;/code&gt; table:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;`bazs`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bazs`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INNER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bars`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bars`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`resource_id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bazs`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bars`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`deleted`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bars`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`resource_type`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Baz'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bazs`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;`bars`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;`resource_type`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Baz'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;MySQL is joining &lt;code class=&quot;highlighter-rouge&quot;&gt;bazs&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;bars&lt;/code&gt;, because we told it to, fine, and it’s checking for &lt;code class=&quot;highlighter-rouge&quot;&gt;resource_type = 'Baz'&lt;/code&gt;. So what’s going wrong? Let’s take a closer look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;bars&lt;/code&gt; table.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th width=&quot;50px&quot;&gt;id&lt;/th&gt;
      &lt;th width=&quot;150px&quot;&gt;resource_type&lt;/th&gt;
      &lt;th width=&quot;150px&quot;&gt;resource_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;&quot;Foo&quot;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&quot;Baz&quot;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br /&gt;
Our SQL statement is trying to join the &lt;code class=&quot;highlighter-rouge&quot;&gt;Baz&lt;/code&gt; with id 1 to a corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; with resource_type “Baz” and resource_id 1.  Well there it is, in the second row, with id 2. We don’t want that one, because we’re explicitly calling the method from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar&lt;/code&gt; with id 1. But the getter method for &lt;code class=&quot;highlighter-rouge&quot;&gt;baz&lt;/code&gt; is not given that information.&lt;/p&gt;

&lt;p&gt;We want a way to add &lt;code class=&quot;highlighter-rouge&quot;&gt;AND `bars`.`id` = 1&lt;/code&gt; to the query. Rails doesn’t currently provide a way to do this while retaining the ability to do the joins: the value &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; here is dependent on the instnace, and joins must construct table-referencing queries without references to instances. I do, but that post is for another time. Until then, there is another way around this, although it’s not the prettiest:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'resource_id'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Baz'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foreign_&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Baz&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We simply override the &lt;code class=&quot;highlighter-rouge&quot;&gt;:foo&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:baz&lt;/code&gt; methods to immediately return nil if &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; does not have the corerct resource_type. It’s worth noting that this use of &lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; only works because ActiveRecrd defines assocaition getter and setter methods in the module &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar::GeneratedAssociationMethods&lt;/code&gt; that gets included into &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar&lt;/code&gt;, rather than defining the methods on &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar&lt;/code&gt; itself. Go Rails!&lt;/p&gt;

&lt;p&gt;Speaking of setter methods, there’s at least one more thing we have to add. It seems that Rails does not use the assocaition scopes on create, so if we use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bar.baz = Baz.first
bar
#  =&amp;gt; #&amp;lt;Bar id: 1, resource_type: &quot;Foo&quot;, resource_id: 1, foo_id: nil, deleted: false&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;’s resource_type is still “Foo”! To solve this, we also override the setters in &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar&lt;/code&gt;, although this is beginning to feel a little hacky:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that there are many ways we could have done this, but this way gives us the following advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;super&lt;/code&gt; gets called first, which correctly raises an &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord::AssociationTypeMismatch&lt;/code&gt; exception if we pass in the wrong type before doing anything else to &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;self.resource=()&lt;/code&gt; sets the association cache for &lt;code class=&quot;highlighter-rouge&quot;&gt;:resource&lt;/code&gt; for free while also setting &lt;code class=&quot;highlighter-rouge&quot;&gt;self.resource_type&lt;/code&gt;, for a sligght usability advantage over simply using &lt;code class=&quot;highlighter-rouge&quot;&gt;self.resource_type=()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, there are other methods also defined on assocaitions that we would need to override. Namely, &lt;code class=&quot;highlighter-rouge&quot;&gt;build_foo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;create_foo&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;create_foo!&lt;/code&gt;. Rails is ponitferous. Let’s ust metaprogramming to make this a little more manageable:&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;tl-dr-monomorphic&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;polymorphic: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :resource_id&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;bars: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;resource_type: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Baz&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}},&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;foreign_key: :resource_id&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Foo&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resource_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Baz&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:baz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;typed_resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typed_resource&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A little heavy. Not speaking softly anymore. What can I say, Rails is a bear.&lt;/p&gt;</content><author><name></name></author><summary type="html">Join to a a single resource type in a polymorphic assocaition tl; dr</summary></entry><entry><title type="html">duck, duck, goose</title><link href="speaksoftly.io/2016/04/18/duck.html" rel="alternate" type="text/html" title="duck, duck, goose" /><published>2016-04-18T21:55:27-04:00</published><updated>2016-04-18T21:55:27-04:00</updated><id>speaksoftly.io/2016/04/18/duck</id><content type="html" xml:base="speaksoftly.io/2016/04/18/duck.html">&lt;p&gt;Duck typing and I are in a fight.&lt;/p&gt;

&lt;p&gt;A lot of rubyists like to extol the virtues of “duck typing”. That is, you determine the type of an object by the methods it responds to. If object.respond_to?(:quack), then it must be a Duck! This is bundled up with weak typing, where variables and method arguments are not required to be a specific type. I love weak typing (in most contexts I code in, anyway). Weak typing and I are not in a fight.&lt;/p&gt;

&lt;p&gt;But I always prefer &lt;code class=&quot;highlighter-rouge&quot;&gt;is_a?&lt;/code&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to?&lt;/code&gt;. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to?&lt;/code&gt;, you never know if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an object that does not &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to?&lt;/code&gt; your method name now will in some future version, or even with some dynamic method definitions&lt;/li&gt;
  &lt;li&gt;an object that does &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to?&lt;/code&gt; your method actually does anything reasonable or even safe when you call your method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A counter-argument, according to &lt;a href=&quot;https://en.wikipedia.org/wiki/Duck_typing&quot;&gt;Wikipedia&lt;/a&gt;, is that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the issue is handled by testing, and the necessary knowledge of the codebase required to maintain it&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bollocks.&lt;/p&gt;

&lt;p&gt;Are you going to keep track of every public method of every third-party gem you are using? What about dynamically-defined methods? Sure, if you’re testing one of the core behaviors of your app you’ll be careful and will know what possible objects you might be dealing with. But somewhere in the corner of your app you’ve asked, almost as an aside, if something &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to? :each&lt;/code&gt;, maybe because the input might be a &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; or an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;s. That’s all fine until the &lt;code class=&quot;highlighter-rouge&quot;&gt;Bar&lt;/code&gt; gem that defined &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; decided it would be cool to allow you to enumerate an individual &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;, because under the hood a &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; is really a collection of &lt;code class=&quot;highlighter-rouge&quot;&gt;Baz&lt;/code&gt;s. But you didn’t know that, and you shoudln’t have to.&lt;/p&gt;

&lt;p&gt;You disagree. Really? Do you know all of the classes defined in Rails as well as you know your own code? Can you recite all of the Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable&lt;/code&gt; methods right now?&lt;/p&gt;

&lt;p&gt;Instead, knowledge of your codebase allows you to master what names exist in what namespaces so that you know your constant Beatle refers to a musician and not a bug. This lets you use &lt;code class=&quot;highlighter-rouge&quot;&gt;is_a?&lt;/code&gt; with reckless abandon: you know exactly what classes you’ve included into your app. While other gems are able to overwrite your namespaces, that would be rather rude of them. Not speaking very softly. Defining mew methods in their own classes, however, is not rude. You’re asking for trouble if in order to infer suitability you ask classes, in their own namespaces that you do not control, simply whether or not they have defined a method of an arbitrary name that could mean anything at all. You’re asking an object of an arbitray class that you think might be Array-like &lt;code class=&quot;highlighter-rouge&quot;&gt;responds_to? :push&lt;/code&gt;, and you’re chugging along happily until someone calls your method with a NuclearLaunchButton object. Oops.&lt;/p&gt;</content><author><name></name></author><summary type="html">Duck typing and I are in a fight.</summary></entry><entry><title type="html">offline_lookup</title><link href="speaksoftly.io/2016/04/12/offline-lookup.html" rel="alternate" type="text/html" title="offline_lookup" /><published>2016-04-12T17:36:36-04:00</published><updated>2016-04-12T17:36:36-04:00</updated><id>speaksoftly.io/2016/04/12/offline-lookup</id><content type="html" xml:base="speaksoftly.io/2016/04/12/offline-lookup.html">&lt;h2 id=&quot;add-convenient-syntax-and-reduce-db-fetches-for-small-lookup-tables&quot;&gt;Add convenient syntax and reduce db fetches for small lookup tables&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#tl-dr-offline_lookup&quot;&gt;tl; dr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A common pattern in many apps is to have a small set of enumerable options in a database table. A good example we have is turnaround_levels, which decsribe various speeds of service customers are pyaing us for. For simplicitly, let’s pretend we have the following values: “Two Hour”, “Same Day”, “Standard”, and “Extended”. A lot of our code was littered with calls such as &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo.where(turnaround_level_id: TurnaroundLevel.find_by(name: &quot;Standard&quot;).id)&lt;/code&gt;. An alternative could have been &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo.joins(:turnaround_level).merge(TurnaroundLevel.where(name: &quot;Standard&quot;))&lt;/code&gt;. All of these are equally ugly to me. Further, this itself littered the logs with these tiny lookups of Turnaround Level, which seems silly since there are, short of large policy changes, pretty static.&lt;/p&gt;

&lt;p&gt;The existing solution was scaterred between two options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hard-coding constants such as &lt;code class=&quot;highlighter-rouge&quot;&gt;STANDARD_ID&lt;/code&gt;, etc, into TurnaroundLevel&lt;/li&gt;
  &lt;li&gt;hard-coding a Hash of the actual rows of the turnaround_levels table into &lt;code class=&quot;highlighter-rouge&quot;&gt;TURNAROUND_LEVELS&lt;/code&gt;, keyed either on id or name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I wanted something more dynamic, flexible, and modularizeable. I wanted to say &lt;code class=&quot;highlighter-rouge&quot;&gt;TurnaroundLevel.standard_id&lt;/code&gt;. I wanted to be able say &lt;code class=&quot;highlighter-rouge&quot;&gt;TurnaroundLevel.one_hour_id&lt;/code&gt; without thinking about it as soon as “One Hour” was added to our databse. And I wanted to be able to enable this feature in other models easily. So I created OfflineLookup.&lt;/p&gt;

&lt;p&gt;My initial motivation was cutting down on db accesses. but with such a small table and indexed properly, it’s really not a performance hit. But it has remained popular as it is very convenient syntax, keeping our code and our logs a little cleaner.&lt;/p&gt;

&lt;p&gt;This gem was motivated by creating methods such as &lt;code class=&quot;highlighter-rouge&quot;&gt;:two_hour_id&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:standard_id&lt;/code&gt;. I assumed the key field of interest was called “id”, but imediately saw the need to customize the name of the lookup column. In this case, it was “name”. So the stripped down, basic, original implemnetation looked like this:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OfflineIDLookup&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Concern&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ClassMethods&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use_offline_id_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lookup_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;

      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;singleton_class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_eval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lookup_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;methodize&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class_eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OfflineIDLookup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When a model calls &lt;code class=&quot;highlighter-rouge&quot;&gt;use_offline_id_lookup&lt;/code&gt;, it defines class methods &lt;code class=&quot;highlighter-rouge&quot;&gt;#{name}_id&lt;/code&gt;, for each methodized &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; in the table. This assumes name uniqueness off the bat, which may not be correct. And of course, if the table its operating on is large, it’s a pretty bad idea; not just because you’re polluting your model with tons of new methods, but because all those values that logically live inside the db are being kept in memory now. But for a table with a handlful of rows, it’s perfect.&lt;/p&gt;

&lt;p&gt;There were a number of modifications I wanted to make. I quickly learned that whlie &lt;code class=&quot;highlighter-rouge&quot;&gt;TurnaroundLevel.two_hour_id&lt;/code&gt; was what I wanted most of the time, there were times when I has “Two Hour” as a string. So I created two new methods:&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;arg_methods&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```ruby arg_methods
        define_method “#{field}_for_id” do |id|
          lookup_values[id]
        end&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    define_method &quot;id_for_#{field}&quot; do |name|
      lookup_values.keys.find{|id| lookup_values[id].methodize == name.to_s.methodize}
    end ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TurnaroudnLevel.id_for_name(tuurnaround)&lt;/code&gt; is not hugely more convenient or readable than &lt;code class=&quot;highlighter-rouge&quot;&gt;TurnaroundLevel.find_by(name: turnaround).try(:id)&lt;/code&gt;, but I still deemed the benefit worth the extra namespace pollution. We already had the lookup data in memory anyway. This became even more true when I moved away from defining these methods in a closure (i.e. a block where I’m referring to variables defined outside the block) because I remain unsure of the overhead of keeping track of large arrays of data define outside a closure. I felt it cleaner and more object=oriented to use a class attribute to store the lookup values on the class itself. So now the root module looks as follows. You’ll notice I also started customizing the key field and adding some keyword arg options to the call to what is not simply called &lt;code class=&quot;highlighter-rouge&quot;&gt;use_offline_lookup&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OfflineLookup&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ActiveRecord&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use_offline_lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;key: :id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;lookup_methods: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;class_attribute&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:offline_lookup_values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:offline_lookup_options&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offline_lookup_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;field: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;key: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;lookup_methods: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;offline_lookup_values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pluck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;

      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OfflineLookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OfflineLookup::Base&lt;/code&gt; is now free as its own module to define any methods it wants, and will have access to any of the class attributes defined in the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;use_offline_lookup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When all the dust settled, I ended up with the following types of methods for each entry in the table:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:two_hour_id&lt;/code&gt;: return the id for the “Two Hour” TurnaroundLevel.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:two_hour&lt;/code&gt;: return the TurnaroundaroundLevel instance with name “Two Hour”&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:two_hour?&lt;/code&gt; (instnace method): return true iff the TurnaroundLevel instance was “Two Hour”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last one technically violates the gem name: I’m only storing the (id, name) pairs, so this method is not possible with a db lookup. The alternative is to store the full objects in memory, but I’d rather not. And the convenience of having &lt;code class=&quot;highlighter-rouge&quot;&gt;TurnaroundLevel.two_hour&lt;/code&gt; was in keeping with the spirit of the gem.&lt;/p&gt;

&lt;p&gt;As we saw &lt;a href=&quot;#arg_methods&quot;&gt;above&lt;/a&gt;, we also had two extra methods where you could pass in the lookup values as args:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:name_for_id(id)&lt;/code&gt;: return the name for the given id.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:id_for_name(name)&lt;/code&gt;: return the id for the given name.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;tl-dr-offline_lookup&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The full gem is available at [https://github.com/ozydingo/offline_lookup]&lt;/p&gt;</content><author><name></name></author><summary type="html">Add convenient syntax and reduce db fetches for small lookup tables tl; dr</summary></entry></feed>